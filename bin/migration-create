#!/usr/bin/env python2.7

import os.path, hashlib, migrations


MIGRATION_TEMPLATE = """
    CREATE OR REPLACE FUNCTION %(migration_name)s ( varchar ) RETURNS VOID AS
    $BODY$
    DECLARE
        _direction varchar := UPPER($1)
    BEGIN
        CASE
            WHEN _direction = 'UP' THEN
                PERFORM SELECT 1; -- TODO: Write UP migration...

            WHEN _direction = 'DOWN' THEN
                PERFORM SELECT 1; -- TODO: Write DOWN migration...

        END CASE;
    END;
    $BODY$
    LANGUAGE plpgsql;
"""


class MigrationCreate(migrations.Command):
    def get_HASH ( self, schema_file, long_hash=False ):
        with open(schema_file) as f:
            HASH = hashlib.sha256(f.read()).hexdigest()

            return HASH if long_hash else HASH[0:7]


    def main ( self, schema_file, migration_path, migration_name, long_hash=False, **kwargs ):
        schema_file, migration_path = map(migrations.path, (schema_file, migration_path))

        migration_name = migration_name or ('migration_%s' % self.get_HASH(schema_file, long_hash))

        migration_file = os.path.join(migration_path, migration_name + '.pg.sql')

        if os.path.exists(migration_file) and not kwargs['force']:
            raise Exception, 'Existing migration file: %s (use --force to overwrite)' % migration_file

        with open(migration_file, 'w') as f:
            f.write(MIGRATION_TEMPLATE % locals())


if __name__ == '__main__':
    command = MigrationCreate(
    ).add_argument('-s', '--schema-file', dest='schema_file', default='etc/schema.pg.sql',
        help='the schema file to mark migrations from'
    ).add_argument('-M', '--migration-path', dest='migration_path', default='etc/migrations/',
        help='the path in which to store migrations'
    ).add_argument('-m', '--migration-name', type=str, dest='migration_name',
        help='the name of the migration to create (use the current hash of the schema file by default)'
    ).add_argument('--long-hash', action='store_true',
        help='use the full 40-character HASH in MIGRATION_NAME if "--migration-name" is not provided'
    ).add_argument('-f', '--force', action='store_true', dest='force',
        help='force overwrite of existing migration file'
    )

    command()

## vim: filetype=python
